// This code contains Lab 2 code without Lab 1 integrated.
import * as THREE from 'three';
import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';

// create a scene 
const scene = new THREE.Scene();

// Stereo Camera Setup
var stereocam = new THREE.StereoCamera();
stereocam.eyeSep = 0.064;  // Note: average human IPD is ~64mm

// Scene Camera Update
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / 2 / window.innerHeight, 0.1, 1000);
camera.position.set(0, 0, 7);
camera.lookAt(0, 0, 0);
stereocam.update(camera);

const clock = new THREE.Clock();

// Canvas Separation Logic
var half_canvas_separation = 20;
const rendererLeft = new THREE.WebGLRenderer();
rendererLeft.setSize(window.innerWidth / 2 - half_canvas_separation, window.innerHeight);
rendererLeft.domElement.style.position = 'absolute';
rendererLeft.domElement.style.left = '0px';
rendererLeft.domElement.style.top = '0px';
document.body.appendChild(rendererLeft.domElement);

const rendererRight = new THREE.WebGLRenderer();
rendererRight.setSize(window.innerWidth / 2 - half_canvas_separation, window.innerHeight);
rendererRight.domElement.style.position = 'absolute';
rendererRight.domElement.style.left = (window.innerWidth / 2 + half_canvas_separation) + 'px';
rendererRight.domElement.style.top = '0px';
document.body.appendChild(rendererRight.domElement);

// EffectComposer Setup
const renderPassL = new RenderPass(scene, stereocam.cameraL);
const renderPassR = new RenderPass(scene, stereocam.cameraR);

var renderTargetLeft = new THREE.WebGLRenderTarget(window.innerWidth/2 - half_canvas_separation, window.innerHeight);
var renderTargetRight = new THREE.WebGLRenderTarget(window.innerWidth/2 - half_canvas_separation, window.innerHeight);

const effectComposerL = new EffectComposer(rendererLeft, renderTargetLeft);
const effectComposerR = new EffectComposer(rendererRight, renderTargetRight);

effectComposerL.addPass(renderPassL);
effectComposerR.addPass(renderPassR);

const geometry = new THREE.SphereGeometry(2, 16, 16);
const material = new THREE.MeshBasicMaterial({ color: 0x5AD684 });
const sphere = new THREE.Mesh(geometry, material);
sphere.position.set(1, 1, 0);
scene.add(sphere);

const geometry1 = new THREE.PlaneGeometry(7, 7);
const material1 = new THREE.MeshBasicMaterial({ color: 0x0000ff, side: THREE.DoubleSide });
const plane = new THREE.Mesh(geometry1, material1);
scene.add(plane);

function animate() {
    const delta = clock.getDelta();
    stereocam.update(camera);
    requestAnimationFrame(animate);

    sphere.rotation.x += delta;
    sphere.rotation.y += delta;

    // Using the EffectComposers to render
    effectComposerL.render(delta);
    effectComposerR.render(delta);
}

animate();